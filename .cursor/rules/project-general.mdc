---
description: 
globs: 
alwaysApply: true
---
# Асансьорна Платформа - Общи правила

## Обща информация
- **Цел**: Платформата задължително свързва следните роли:
  - **Компании за поддръжка**: Организации, предоставящи сервизни услуги. Регистрацията е задължителна и се проверява.
  - **Техници**: Специалисти за ремонти и планова поддръжка. Изисква се валидна сертификация, потвърдена преди достъп.
  - **Управители на сгради**: Клиенти, които заявяват услуги и следят статуса. Идентификацията е задължителна.

## Технологичен стек
- **Frontend**: 
  - Използвайте само React версия 19 или по-нова.
  - TypeScript версия 5.7 или по-нова е задължителна за всички файлове.
  - Vite версия 6 или по-нова се използва като единствен build инструмент.
- **Backend**: 
  - Supabase чрез `@supabase/supabase-js` е единственият позволен инструмент за база данни, удостоверяване, съхранение и реалновременни актуализации.
- **Стилизация**: 
  - Tailwind CSS версия 3.4 или по-нова е задължителна.
  - Плъгините `@tailwindcss/forms` и `@tailwindcss/typography` трябва да бъдат активни.
  - `tailwind-merge` е задължителен за оптимизация на класовете.
- **Валидация на форми**: 
  - `react-hook-form` версия 7.54 или по-нова е единственият инструмент за форми.
  - `zod` версия 3.24 или по-нова се използва за валидация чрез `@hookform/resolvers`.
- **State Management**: 
  - React Context с пълна TypeScript типизация е единственият позволен метод за глобално състояние.
- **API Интеграция**: 
  - Заявките към Supabase се извършват само чрез `@supabase/supabase-js`.
- **Навигация**: 
  - `react-router-dom` версия 6.22 или по-нова е задължителна за управление на маршрутите.
- **Известия**: 
  - `react-toastify` версия 11.0 или по-нова е единственият инструмент за нотификации.
- **Подсказки**: 
  - `react-tooltip` версия 5.28 или по-нова е задължителна за всички tooltip-и.
- **Допълнителни инструменти**: 
  - `clsx` е задължителен за динамични класове.
  - `@headlessui/react` е задължителен за достъпни UI компоненти.

## Архитектурни принципи
- **Модулен монолит**: 
  - Задължително разделение на домейни в отделни директории:
    - Преизползваеми UI компоненти.
    - Специфични бизнес функционалности.
    - Интеграции и заявки към Supabase.
    - Общи TypeScript типове.
    - Помощни функции.
    - Преизползваема бизнес логика чрез hooks.
    - Схеми за валидация с `zod`.
  - Забранено е смесването на домейни в една директория.
- **Чиста архитектура**: 
  - Задължително разделение на слоеве:
    - Представителен слой: само UI с React.
    - Бизнес логика: само hooks и функции.
    - Данни и услуги: само Supabase интеграции.
  - Забранено е пресичане на отговорности между слоевете.
- **Типобезопасност**: 
  - Пълна поддръжка на TypeScript е задължителна.
  - Проверка чрез `typescript` и `typescript-eslint` се изпълнява при всяка компилация.

## Конвенции за код
- **Език**:
  - Български език е задължителен за потребителския интерфейс.
  - Английски език е задължителен за код, коментари, променливи и функции.
  - Забранено е смесване на езици в кода.
- **Качество**:
  - 100% покритие с TypeScript типове е задължително.
  - Валидация на всички входни данни чрез `zod` е задължителна.
  - Обработка на грешки с `try-catch` и `react-toastify` е задължителна за всяка операция.
  - Хардкоднати стойности са забранени – използвайте само константи.
  - Документация в коментари е задължителна за всяка сложна логика.
- **Сигурност**:
  - Проверка на права чрез Supabase Auth е задължителна за всяка операция.
  - Санитизация на входните данни преди изпращане към Supabase е задължителна.
  - Защита чрез ESLint и `eslint-plugin-react-hooks` се изпълнява при всяка проверка.

## Специфични най-добри практики

### React
- Задължително използвайте само функционални компоненти с hooks.
- Валидация на props чрез TypeScript интерфейси е задължителна.
- Оптимизация с `React.memo`, `useMemo` и `useCallback` е задължителна при сложни компоненти.
- Глобално състояние се управлява само с React Context.

### React Router DOM
- Вложени маршрути с `react-router-dom` са задължителни.
- Динамично рутиране е задължително за всички мащабируеми секции.
- `useNavigate` е единственият позволен метод за програмна навигация.
- Обработка на грешки с `<Route errorElement>` е задължителна за всеки маршрут.

### React Hook Form
- Контролирани компоненти с `react-hook-form` са задължителни.
- Интеграция на `zod` чрез `@hookform/resolvers` е задължителна за валидация.
- Управление на формите само чрез `useForm` hook.
- Асинхронни заявки към Supabase при submit са задължителни.

### React Tooltip
- `react-tooltip` е задължителен за всички подсказки.
- Свързване чрез `data-tooltip-id` атрибути е задължително.
- Клас "tooltip-custom" е задължителен за всички tooltip-и.
- Поддръжка на тъмен режим чрез Tailwind CSS променливи (напр. `dark:`) е задължителна.
- `Tooltip` компонентът се позиционира непосредствено до anchor елементите.
- `clickable={true}` е задължителен за интерактивни подсказки.

### Zod и валидация
- Схемите се съхраняват само в специална директория.
- Именуване на схемите е задължително последователно:
  - Схеми за обекти (напр. асансьори, потребители).
  - Схеми за форми, свързани с обектите.
  - Схеми за филтриране в съответния файл.
- Структура на схемите:
  - Константи за лимити и съобщения са задължителни.
  - Помощни функции за валидация са задължителни при сложна логика.
  - Основна схема с `zod` е задължителна.
  - Типове чрез `z.infer` са задължителни.
- Всяка схема експортира само:
  - Основната `zod` схема.
  - TypeScript тип, генериран от схемата.

### Tailwind CSS
- Utility класове за отзивчив дизайн (напр. `sm:`, `md:`) са задължителни.
- Компоненти с `@apply` се създават само в CSS файлове.
- Интеграция на `@tailwindcss/forms` и `@tailwindcss/typography` е задължителна.
- Оптимизация с `tailwind-merge` е задължителна за всички класове.

### React Toastify
- Позиция `top-right` е задължителна за известията.
- Персонализиран стил с Tailwind CSS е задължителен.
- Използвайте само `toast.success`, `toast.error`, `toast.info` за нотификации.
- `autoClose` е задължителен за всички известия.

## RPC/Edge Функции за Supabase
- Колоните се пишат с пълен път, когато е необходимо – директно изброяване се избягва, освен ако Supabase го позволява.  
- JOIN-натите таблици имат уникални алиаси – задължително за всяка таблица.  
- Връщаните стойности са типизирани с TypeScript – нетипизирани резултати не се допускат.  
- Проверка за съществуване на таблица се прави преди всяка заявка към Supabase – без пропуски.  
- Всяка функция използва `SECURITY DEFINER` или `SECURITY INVOKER` – изборът е задължителен и се дефинира явно.  
- Сложни заявки се делят на отделни функции – комбиниране в една е забранено.  
- Документация за входни параметри и връщани стойности е задължителна във всяка функция – без празни редове.  
- Само параметризирани заявки към Supabase – ръчно сглобяване на SQL е забранено заради инжекции.  
- Промяна във функция изисква незабавна актуализация на всички клиентски извиквания – отлагане не се толерира.  
- Пагинация и лимити са задължителни за заявки с големи данни – без изключения.  
- Edge Functions се дефинират в Supabase с `Deno` – друг runtime не се ползва.  
- Всички заявки минават през Supabase клиента – директен достъп до базата е забранен.  
- HTTP отговорите от Edge Functions връщат само JSON – други формати не се допускат.  
- Логиране в Edge Functions е задължително за дебъг – без празни изпълнения.  
- Неизползвани RPC/Edge функции и обекти в базата данни се изтриват – проверка за употреба е задължителна преди всяко внедряване.  

## Източници
- [Supabase RPC Docs](mdc:https:/supabase.com/docs/guides/database/functions)  
- [Supabase Edge Functions](mdc:https:/supabase.com/docs/guides/functions)  
- [React Docs](mdc:https:/react.dev)  
- [TypeScript Docs](mdc:https:/www.typescriptlang.org/docs)  